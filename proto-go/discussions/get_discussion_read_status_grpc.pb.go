// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.27.2
// source: proto/discussions/get_discussion_read_status.proto

package discussions_pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	GetDiscussionReadStatus_GetDiscussionReadStatus_FullMethodName = "/discussions.GetDiscussionReadStatus/GetDiscussionReadStatus"
)

// GetDiscussionReadStatusClient is the client API for GetDiscussionReadStatus service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GetDiscussionReadStatusClient interface {
	// Gets a message in a discussion.
	GetDiscussionReadStatus(ctx context.Context, in *GetDiscussionReadStatusRequest, opts ...grpc.CallOption) (*DiscussionReadStatus, error)
}

type getDiscussionReadStatusClient struct {
	cc grpc.ClientConnInterface
}

func NewGetDiscussionReadStatusClient(cc grpc.ClientConnInterface) GetDiscussionReadStatusClient {
	return &getDiscussionReadStatusClient{cc}
}

func (c *getDiscussionReadStatusClient) GetDiscussionReadStatus(ctx context.Context, in *GetDiscussionReadStatusRequest, opts ...grpc.CallOption) (*DiscussionReadStatus, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DiscussionReadStatus)
	err := c.cc.Invoke(ctx, GetDiscussionReadStatus_GetDiscussionReadStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GetDiscussionReadStatusServer is the server API for GetDiscussionReadStatus service.
// All implementations must embed UnimplementedGetDiscussionReadStatusServer
// for forward compatibility
type GetDiscussionReadStatusServer interface {
	// Gets a message in a discussion.
	GetDiscussionReadStatus(context.Context, *GetDiscussionReadStatusRequest) (*DiscussionReadStatus, error)
	mustEmbedUnimplementedGetDiscussionReadStatusServer()
}

// UnimplementedGetDiscussionReadStatusServer must be embedded to have forward compatible implementations.
type UnimplementedGetDiscussionReadStatusServer struct {
}

func (UnimplementedGetDiscussionReadStatusServer) GetDiscussionReadStatus(context.Context, *GetDiscussionReadStatusRequest) (*DiscussionReadStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDiscussionReadStatus not implemented")
}
func (UnimplementedGetDiscussionReadStatusServer) mustEmbedUnimplementedGetDiscussionReadStatusServer() {
}

// UnsafeGetDiscussionReadStatusServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GetDiscussionReadStatusServer will
// result in compilation errors.
type UnsafeGetDiscussionReadStatusServer interface {
	mustEmbedUnimplementedGetDiscussionReadStatusServer()
}

func RegisterGetDiscussionReadStatusServer(s grpc.ServiceRegistrar, srv GetDiscussionReadStatusServer) {
	s.RegisterService(&GetDiscussionReadStatus_ServiceDesc, srv)
}

func _GetDiscussionReadStatus_GetDiscussionReadStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDiscussionReadStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GetDiscussionReadStatusServer).GetDiscussionReadStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GetDiscussionReadStatus_GetDiscussionReadStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GetDiscussionReadStatusServer).GetDiscussionReadStatus(ctx, req.(*GetDiscussionReadStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GetDiscussionReadStatus_ServiceDesc is the grpc.ServiceDesc for GetDiscussionReadStatus service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GetDiscussionReadStatus_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "discussions.GetDiscussionReadStatus",
	HandlerType: (*GetDiscussionReadStatusServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetDiscussionReadStatus",
			Handler:    _GetDiscussionReadStatus_GetDiscussionReadStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/discussions/get_discussion_read_status.proto",
}
