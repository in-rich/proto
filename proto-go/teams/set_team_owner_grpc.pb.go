// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.27.2
// source: proto/teams/set_team_owner.proto

package teams_pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	SetTeamOwner_SetTeamOwner_FullMethodName = "/teams.SetTeamOwner/SetTeamOwner"
)

// SetTeamOwnerClient is the client API for SetTeamOwner service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SetTeamOwnerClient interface {
	// Sets the owner of a team.
	SetTeamOwner(ctx context.Context, in *SetTeamOwnerRequest, opts ...grpc.CallOption) (*Team, error)
}

type setTeamOwnerClient struct {
	cc grpc.ClientConnInterface
}

func NewSetTeamOwnerClient(cc grpc.ClientConnInterface) SetTeamOwnerClient {
	return &setTeamOwnerClient{cc}
}

func (c *setTeamOwnerClient) SetTeamOwner(ctx context.Context, in *SetTeamOwnerRequest, opts ...grpc.CallOption) (*Team, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Team)
	err := c.cc.Invoke(ctx, SetTeamOwner_SetTeamOwner_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SetTeamOwnerServer is the server API for SetTeamOwner service.
// All implementations must embed UnimplementedSetTeamOwnerServer
// for forward compatibility
type SetTeamOwnerServer interface {
	// Sets the owner of a team.
	SetTeamOwner(context.Context, *SetTeamOwnerRequest) (*Team, error)
	mustEmbedUnimplementedSetTeamOwnerServer()
}

// UnimplementedSetTeamOwnerServer must be embedded to have forward compatible implementations.
type UnimplementedSetTeamOwnerServer struct {
}

func (UnimplementedSetTeamOwnerServer) SetTeamOwner(context.Context, *SetTeamOwnerRequest) (*Team, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetTeamOwner not implemented")
}
func (UnimplementedSetTeamOwnerServer) mustEmbedUnimplementedSetTeamOwnerServer() {}

// UnsafeSetTeamOwnerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SetTeamOwnerServer will
// result in compilation errors.
type UnsafeSetTeamOwnerServer interface {
	mustEmbedUnimplementedSetTeamOwnerServer()
}

func RegisterSetTeamOwnerServer(s grpc.ServiceRegistrar, srv SetTeamOwnerServer) {
	s.RegisterService(&SetTeamOwner_ServiceDesc, srv)
}

func _SetTeamOwner_SetTeamOwner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetTeamOwnerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SetTeamOwnerServer).SetTeamOwner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SetTeamOwner_SetTeamOwner_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SetTeamOwnerServer).SetTeamOwner(ctx, req.(*SetTeamOwnerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SetTeamOwner_ServiceDesc is the grpc.ServiceDesc for SetTeamOwner service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SetTeamOwner_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "teams.SetTeamOwner",
	HandlerType: (*SetTeamOwnerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SetTeamOwner",
			Handler:    _SetTeamOwner_SetTeamOwner_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/teams/set_team_owner.proto",
}
