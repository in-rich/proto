// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.27.2
// source: proto/teams/delete_team.proto

package teams_pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	DeleteTeam_DeleteTeam_FullMethodName = "/teams.DeleteTeam/DeleteTeam"
)

// DeleteTeamClient is the client API for DeleteTeam service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DeleteTeamClient interface {
	// Deletes a team.
	DeleteTeam(ctx context.Context, in *DeleteTeamRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type deleteTeamClient struct {
	cc grpc.ClientConnInterface
}

func NewDeleteTeamClient(cc grpc.ClientConnInterface) DeleteTeamClient {
	return &deleteTeamClient{cc}
}

func (c *deleteTeamClient) DeleteTeam(ctx context.Context, in *DeleteTeamRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, DeleteTeam_DeleteTeam_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DeleteTeamServer is the server API for DeleteTeam service.
// All implementations must embed UnimplementedDeleteTeamServer
// for forward compatibility
type DeleteTeamServer interface {
	// Deletes a team.
	DeleteTeam(context.Context, *DeleteTeamRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedDeleteTeamServer()
}

// UnimplementedDeleteTeamServer must be embedded to have forward compatible implementations.
type UnimplementedDeleteTeamServer struct {
}

func (UnimplementedDeleteTeamServer) DeleteTeam(context.Context, *DeleteTeamRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTeam not implemented")
}
func (UnimplementedDeleteTeamServer) mustEmbedUnimplementedDeleteTeamServer() {}

// UnsafeDeleteTeamServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DeleteTeamServer will
// result in compilation errors.
type UnsafeDeleteTeamServer interface {
	mustEmbedUnimplementedDeleteTeamServer()
}

func RegisterDeleteTeamServer(s grpc.ServiceRegistrar, srv DeleteTeamServer) {
	s.RegisterService(&DeleteTeam_ServiceDesc, srv)
}

func _DeleteTeam_DeleteTeam_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTeamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeleteTeamServer).DeleteTeam(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeleteTeam_DeleteTeam_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeleteTeamServer).DeleteTeam(ctx, req.(*DeleteTeamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DeleteTeam_ServiceDesc is the grpc.ServiceDesc for DeleteTeam service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DeleteTeam_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "teams.DeleteTeam",
	HandlerType: (*DeleteTeamServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DeleteTeam",
			Handler:    _DeleteTeam_DeleteTeam_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/teams/delete_team.proto",
}
